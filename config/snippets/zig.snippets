snippet err
  std.log.err("$1", .{});

snippet warn
  std.log.warn("$1", .{});

snippet info
  std.log.info("$1", .{});

snippet debug
  std.log.debug("$1", .{});

snippet print
  std.debug.print("$1", .{});

snippet gpa
  var gpa = std.heap.GeneralPurposeAllocator(.{}).init;
  const alloc = gpa.allocator();
  defer {
    if (gpa.deinit() == .leak) {
      std.log.err("Memory leak detected", .{});
    }
  }

snippet std
  const std = @import("std");

snippet req
  const $1 = @import("$2");

snippet format
  pub fn format(self: @This(), comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {
    _ = fmt;
    _ = options;
    try writer.print("{any}", .{ self });
  }
