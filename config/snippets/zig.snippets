snippet err
  std.log.err("$1", .{});

snippet warn
  std.log.warn("$1", .{});

snippet info
  std.log.info("$1", .{});

snippet debug
  std.log.debug("$1", .{});

snippet print
  std.debug.print("$1", .{});

snippet stderr
  var stderr_buf: [1024]u8 = undefined;
  var stderr_writer = std.fs.File.stderr().writer(&stderr_buf);
  const stderr = &stderr_writer.interface;

snippet stdout
  var stdout_buf: [1024]u8 = undefined;
  var stdout_writer = std.fs.File.stdout().writer(&stdout_buf);
  const stdout = &stdout_writer.interface;

snippet gpa
  var gpa = std.heap.GeneralPurposeAllocator(.{}).init;
  const alloc = gpa.allocator();
  defer {
    if (gpa.deinit() == .leak) {
      std.log.err("Memory leak detected", .{});
    }
  }

snippet import
  const $1 = @import("$1");

snippet format
  pub fn format(self: @This(), writer: *std.Io.Writer) !void {
    try writer.print("{f}", .{ self });
	try writer.flush();
  }
